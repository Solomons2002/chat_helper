from aiogram import types
from mics import dp , bot
from models import Database
import text
import markup
from re import compile
from aiogram.dispatcher.filters.builtin import CommandStart
import datetime
import config
from states import AddKey,UpdateText

db = Database()
@dp.callback_query_handler(lambda call : call.data[:8] == 'add_key_',  state = AddKey.state)
async def message(query ,  state):
    await bot.delete_message(
             chat_id = query.message.chat.id,
             message_id = query.message.message_id
        )    
    await query.message.answer(
            text = "‚ÑπÔ∏è–î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤–æ—Ç –≤ —Ç–∞–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–µ :\n*–∫–æ–¥—ã –∑–∞–ø—á–∞—Å—Ç–µ–π* , *–∑–∞–ø—á–∞—Å—Ç–∏*\n‚ñ™Ô∏è–ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –¥–æ –∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π —Å—Ç–æ—è–ª –ø—Ä–æ–±–µ–ª.",
            reply_markup = markup.cancel,
            parse_mode = 'Markdown'
        )
    await state.update_data(name = query.data[8:])
    await AddKey.key.set()
    
    
@dp.message_handler(state = AddKey.key, text = 'üö´ –û—Ç–º–µ–Ω–∞')
async def message( message, state):

    await message.answer(
            text = '*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*',
            reply_markup = markup.main_menu,
            parse_mode = 'Markdown'
        )    
    await state.finish()
    
@dp.message_handler(state = AddKey.key, content_types = types.ContentType.TEXT)
async def message( message, state):
    a = await state.get_data()
    for key in message.text.split(' , '):
       
        if len(message.text.split(' , ')) < 2:
           await db.add_key(a['name'], key )
           break

        else:
            await db.add_key(a['name'] , key 
            )
    await state.finish()
    await message.answer(
            text = '*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*',
            reply_markup = markup.main_menu,
            parse_mode = 'Markdown'
        )    
@dp.callback_query_handler(lambda call : call.data[:8] == 'del_key_')
async def message(query ,  state):
    lists = await db.get_keys(query.data[8:])
    await bot.edit_message_text(
             
             chat_id = query.message.chat.id,
             message_id = query.message.message_id,
             text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å',
             reply_markup = markup.get_keys_markup(lists)
        )
@dp.callback_query_handler(lambda call : call.data[:9] == 'del2_key_')
async def message(query ,  state):
    await db.delete_key(query.data[9:])

    await bot.delete_message(
             chat_id = query.message.chat.id,
             message_id = query.message.message_id
        )
    await query.message.answer(
            text = '*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*',
            reply_markup = markup.main_menu,
            parse_mode = 'Markdown'
        )
        
@dp.callback_query_handler(lambda call : call.data[:8] == 'up_text_',  state = UpdateText.state)
async def message(query ,  state):
    await state.update_data(name = query.data[8:])
    await query.message.answer(
            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å –¥–ª—è –ø–∞—Ä—ã –∫–ª—é—á–µ–π",
            reply_markup = markup.cancel
        )
    await UpdateText.text.set()
    
