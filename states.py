from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from mics import dp , bot
from models import Database
from aiogram import types
import text
import markup
import datetime
import config


db = Database()
class CreatePairOfKeys(StatesGroup):
    name = State()
    keys = State()
    text = State()
    
class AddKey(StatesGroup):
    state = State()
    key = State()    
    
class UpdateText(StatesGroup):
    
    state = State()
    text = State()
        


    
@dp.message_handler(state = CreatePairOfKeys.name, text = 'üö´ –û—Ç–º–µ–Ω–∞')
async def message( message, state):
    await message.answer(
            text = '*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*',
            reply_markup = markup.main_menu,
            parse_mode = 'Markdown'
        )    
    await state.finish()
    
@dp.message_handler(state = CreatePairOfKeys.name, content_types = types.ContentType.TEXT)
async def message( message, state):
    answer = await db.get_pair_of_key(message.text)
    print(answer)
    if  answer:
        await message.answer(
               '–î–∞–Ω–Ω–∞—è –ø–∞—Ä–∞ –∫–ª—é—á–µ–π —É–∂–µ –µ—Å—Ç—å'
            )
        return
    else:
        await message.answer(
                text = '–û—Ç–ª–∏—á–Ω–æ \n‚ÑπÔ∏è–î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ :\n*–∫–æ–¥—ã –∑–∞–ø—á–∞—Å—Ç–µ–π* , *–∑–∞–ø—á–∞—Å—Ç–∏*\n‚ñ™Ô∏è–ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –¥–æ –∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π —Å—Ç–æ—è–ª –ø—Ä–æ–±–µ–ª.",',
                parse_mode = 'Markdown'
            )    
    await state.update_data(name = message.text)
    await CreatePairOfKeys.keys.set()


@dp.message_handler(state = CreatePairOfKeys.keys, text = 'üö´ –û—Ç–º–µ–Ω–∞')
async def message( message, state):
    await message.answer(
            text = '*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*',
            reply_markup = markup.main_menu,
            parse_mode = 'Markdown'
        )    
    await state.finish()
    
@dp.message_handler(state = CreatePairOfKeys.keys, content_types = types.ContentType.TEXT)
async def message( message, state):
    await message.answer(
            text = '–û—Ç–ª–∏—á–Ω–æ , —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–ª—é—á–∏',
            parse_mode = 'Markdown'
            )    
    await state.update_data(keys = message.text)
    await CreatePairOfKeys.text.set() 


@dp.message_handler(state = CreatePairOfKeys.text, text = 'üö´ –û—Ç–º–µ–Ω–∞')
async def message( message, state):
    await message.answer(
            text = '*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*',
            reply_markup = markup.main_menu,
            parse_mode = 'Markdown'
        )    
    await state.finish()
    
    
    
@dp.message_handler(state = CreatePairOfKeys.text, content_types = types.ContentType.TEXT)
async def message( message, state):
    await message.answer(
            text = '–ü–∞—Ä–∞ –∫–ª—é—á–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!',
            parse_mode = 'Markdown',
            reply_markup = markup.main_menu
            )    
    context = await state.get_data()
    await db.add_pair_of_keys( context['name'], message.text)
    for key in context['keys'].split(' , '):
       
        if len(context['keys'].split(' , ')) < 2:
           await db.add_key(context['name'], key )
           break

        else:
            await db.add_key(context['name'] , key )
        
    
    await state.finish()
    
@dp.message_handler(state = AddKey.state, content_types = types.ContentType.TEXT)
async def message( message, state): 
    await message.answer(
            text = '*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*',
            reply_markup = markup.main_menu,
            parse_mode = 'Markdown'
        )
    await state.finish()
    
@dp.message_handler(state = UpdateText.state, content_types = types.ContentType.TEXT)
async def message( message, state): 
    await message.answer(
            text = '*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*',
            reply_markup = markup.main_menu,
            parse_mode = 'Markdown'
        )
    await state.finish()
    
    
@dp.message_handler(state = UpdateText.text, text = 'üö´ –û—Ç–º–µ–Ω–∞')
async def message( message, state):
    await message.answer(
            text = '*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*',
            reply_markup = markup.main_menu,
            parse_mode = 'Markdown'
        )    
    await state.finish()
    
@dp.message_handler(state = UpdateText.text, content_types = types.ContentType.TEXT)
async def message( message, state):
    answer = await state.get_data()
    await db.update_text(answer['name'], message.text)
    await message.answer(
            text = '*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*',
            reply_markup = markup.main_menu,
            parse_mode = 'Markdown'
        )    
    await state.finish()    